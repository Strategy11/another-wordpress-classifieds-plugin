{"version":3,"file":"onboarding-wizard.js","mappings":"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","sources":["webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/shared/constants.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/elements/elements.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/elements/createPageElements.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/utils/url.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/utils/navigateToStep.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/utils/visibility.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/ui/rootline.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/events/collapsibleListener.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/events/consentTrackingButtonListener.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/events/index.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/initializeOnboardingWizard.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/ui/setupInitialView.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/events/skipStepButtonListener.js","webpack://another-wordpress-classifieds-plugin/./node_modules/@wordpress/dom-ready/build-module/index.js","webpack://another-wordpress-classifieds-plugin/./resources/js/onboarding-wizard/index.js"],"sourcesContent":["export const { INITIAL_STEP, NONCE } = window.awpcpOnboardingWizardVars;\n\nexport const PREFIX = 'awpcp-onboarding';\nexport const HIDDEN_CLASS = 'hidden';\nexport const HIDE_JS_CLASS = 'awpcp-hide-js';\nexport const CURRENT_CLASS = 'awpcp-current';\nexport const OPEN_CLASS = 'awpcp-open';\n\nexport const STEPS = {\n\tINITIAL: INITIAL_STEP,\n\tSUCCESS: 'success',\n};\n","/**\n * Internal dependencies\n */\nimport { PREFIX } from '../shared';\nimport { createPageElements } from '.';\n\nexport const { getElements, addElements } = createPageElements( {\n\tonboardingWizardPage: document.getElementById( `${ PREFIX }-wizard-page` ),\n\tcontainer: document.getElementById( `${ PREFIX }-container` ),\n\trootline: document.getElementById( `${ PREFIX }-rootline` ),\n\tsteps: document.querySelectorAll( `.${ PREFIX }-step` ),\n\n\tskipStepButtons: document.querySelectorAll( `.${ PREFIX }-skip-step` ),\n\tconsentTrackingButton: document.getElementById(\n\t\t`${ PREFIX }-consent-tracking`\n\t),\n\n\tcollapsible: document.querySelector( '.awpcp-collapsible' ),\n} );\n","/**\n * Creates a page elements manager.\n *\n * @param {Object} [initialElements={}] An object containing initial DOM elements.\n * @throws {Error} Throws an error if the `initialElements` is not an object.\n * @return {Object} An object with methods to get and add elements.\n */\nexport function createPageElements( initialElements = {} ) {\n\tif ( typeof initialElements !== 'object' || initialElements === null ) {\n\t\tthrow new Error(\n\t\t\t'createPageElements: initialElements must be a non-null object'\n\t\t);\n\t}\n\n\tlet elements = initialElements;\n\n\t/**\n\t * Retrieve the initialized essential DOM elements.\n\t *\n\t * @return {Object} The initialized elements object.\n\t */\n\tfunction getElements() {\n\t\treturn elements;\n\t}\n\n\t/**\n\t * Add new elements to the elements object.\n\t *\n\t * @param {Object} newElements An object containing new elements to be added.\n\t * @throws {Error} Throws an error if the `newElements` is not a non-null object.\n\t * @return {void} Updates the elements object by merging the new elements into it.\n\t */\n\tfunction addElements( newElements ) {\n\t\tif ( typeof newElements !== 'object' || newElements === null ) {\n\t\t\tthrow new Error(\n\t\t\t\t'addElements: newElements must be a non-null object'\n\t\t\t);\n\t\t}\n\n\t\telements = { ...elements, ...newElements };\n\t}\n\n\treturn { getElements, addElements };\n}\n","/**\n * Initializes URL and URLSearchParams objects from the current window's location\n */\nconst url = new URL( window.location.href );\nconst urlParams = url.searchParams;\n\n/**\n * Gets the value of a specified query parameter from the current URL.\n *\n * @param {string} paramName The name of the query parameter to retrieve.\n * @return {string|null} The value associated with the specified query parameter name, or null if not found.\n */\nexport const getQueryParam = ( paramName ) => urlParams.get( paramName );\n\n/**\n * Removes a query parameter from the current URL and returns the updated URL string.\n *\n * @param {string} paramName The name of the query parameter to remove.\n * @return {string} The updated URL string.\n */\nexport const removeQueryParam = ( paramName ) => {\n\turlParams.delete( paramName );\n\turl.search = urlParams.toString();\n\treturn url.toString();\n};\n\n/**\n * Sets the value of a query parameter in the current URL and optionally updates the browser's history state.\n *\n * @param {string} paramName                  The name of the query parameter to set.\n * @param {string} paramValue                 The value to set for the query parameter.\n * @param {string} [updateMethod='pushState'] The method to use for updating the history state. Accepts 'pushState' or 'replaceState'.\n * @return {string} The updated URL string.\n */\nexport const setQueryParam = (\n\tparamName,\n\tparamValue,\n\tupdateMethod = 'pushState'\n) => {\n\turlParams.set( paramName, paramValue );\n\turl.search = urlParams.toString();\n\n\tif ( [ 'pushState', 'replaceState' ].includes( updateMethod ) ) {\n\t\tconst state = { [ paramName ]: paramValue };\n\t\twindow.history[ updateMethod ]( state, '', url );\n\t}\n\n\treturn url.toString();\n};\n\n/**\n * Checks if a query parameter exists in the current URL.\n *\n * @param {string} paramName The name of the query parameter to check.\n * @return {boolean} True if the query parameter exists, otherwise false.\n */\nexport const hasQueryParam = ( paramName ) => urlParams.has( paramName );\n","/**\n * Internal dependencies\n */\nimport { getElements } from '../elements';\nimport { CURRENT_CLASS, PREFIX } from '../shared';\nimport { updateRootline } from '../ui';\nimport { setQueryParam, hide, show } from '.';\n\n/**\n * Navigates to the given step in the onboarding sequence.\n * Optionally updates the browser's history state to include the current step.\n *\n * @param {string} stepName                   The name of the step to navigate to.\n * @param {string} [updateMethod='pushState'] Specifies the method to update the browser's history and URL. Accepts 'pushState' or 'replaceState'. If omitted, defaults to 'pushState'.\n * @return {void}\n */\nexport const navigateToStep = ( stepName, updateMethod = 'pushState' ) => {\n\t// Find the target step element\n\tconst targetStep = document.querySelector(\n\t\t`.${ PREFIX }-step[data-step-name=\"${ stepName }\"]`\n\t);\n\n\tif ( ! targetStep ) {\n\t\treturn;\n\t}\n\n\t// Find and hide the current step element\n\tconst currentStep = document.querySelector(\n\t\t`.${ PREFIX }-step.${ CURRENT_CLASS }`\n\t);\n\n\tif ( currentStep ) {\n\t\tcurrentStep.classList.remove( CURRENT_CLASS );\n\t\thide( currentStep );\n\t\tcurrentStep.classList.remove( 'awpcp-fadein-up' );\n\t}\n\n\t// Display the target step element\n\ttargetStep.classList.add( CURRENT_CLASS );\n\tshow( targetStep );\n\ttargetStep.classList.add( 'awpcp-fadein-up' );\n\n\t// Update the onboarding wizard's current step attribute\n\tconst { onboardingWizardPage } = getElements();\n\tonboardingWizardPage.setAttribute( 'data-current-step', stepName );\n\n\t// Update the URL query parameter, with control over history update method\n\tsetQueryParam( 'step', stepName, updateMethod );\n\n\tupdateRootline( stepName );\n};\n\n/**\n * Navigates to the next step in the sequence.\n *\n * The function assumes steps are sequentially ordered in the DOM.\n *\n * @return {void}\n */\nexport const navigateToNextStep = () => {\n\tconst currentStep = document.querySelector(\n\t\t`.${ PREFIX }-step.${ CURRENT_CLASS }`\n\t);\n\tconst nextStep = currentStep?.nextElementSibling;\n\n\tif ( ! nextStep ) {\n\t\treturn;\n\t}\n\n\tnavigateToStep( nextStep.dataset.stepName );\n};\n\n/**\n * Navigates to the previous step in the sequence.\n *\n * The function assumes steps are sequentially ordered in the DOM.\n *\n * @return {void}\n */\nexport const navigateToPrevStep = () => {\n\tconst currentStep = document.querySelector(\n\t\t`.${ PREFIX }-step.${ CURRENT_CLASS }`\n\t);\n\tconst prevStep = currentStep?.previousElementSibling;\n\n\tif ( ! prevStep ) {\n\t\treturn;\n\t}\n\n\tnavigateToStep( prevStep.dataset.stepName );\n};\n","/**\n * Internal dependencies\n */\nimport { HIDDEN_CLASS } from '../shared';\n\n/**\n * Shows specified elements by removing the hidden class.\n *\n * @param {Array<Element>} elements An array of elements to show.\n * @return {void}\n */\nexport const showElements = ( elements ) =>\n\tArray.from( elements )?.forEach( ( element ) => show( element ) );\n\n/**\n * Hides specified elements by adding the hidden class.\n *\n * @param {Array<Element>} elements An array of elements to hide.\n * @return {void}\n */\nexport const hideElements = ( elements ) =>\n\tArray.from( elements )?.forEach( ( element ) => hide( element ) );\n\n/**\n * Removes the hidden class to show the element.\n *\n * @param {Element} element The element to show.\n * @return {void}\n */\nexport const show = ( element ) => element?.classList.remove( HIDDEN_CLASS );\n\n/**\n * Adds the hidden class to hide the element.\n *\n * @param {Element} element The element to hide.\n * @return {void}\n */\nexport const hide = ( element ) => element?.classList.add( HIDDEN_CLASS );\n\n/**\n * Checks if an element is visible.\n *\n * @param {HTMLElement} element The HTML element to check for visibility.\n * @return {boolean} Returns true if the element is visible, otherwise false.\n */\nexport const isVisible = ( element ) => {\n\tconst styles = window.getComputedStyle( element );\n\n\treturn styles.getPropertyValue( 'display' ) !== 'none';\n};\n","/**\n * Internal dependencies\n */\nimport { getElements } from '../elements';\nimport { CURRENT_CLASS, STEPS } from '../shared';\n\nconst COMPLETED_STEP_CLASS = 'awpcp-completed-step';\n\n/**\n * Updates the rootline to reflect the current and completed steps.\n *\n * - Applies COMPLETED_STEP_CLASS to steps before the current one.\n * - Applies CURRENT_CLASS to the current step, unless it is the success step.\n *\n * @param {string} currentStep The current step in the process.\n * @return {void}\n */\nexport function updateRootline( currentStep ) {\n\tconst { rootline } = getElements();\n\tconst currentItem = rootline.querySelector(\n\t\t`.awpcp-onboarding-rootline-item[data-step=\"${ currentStep }\"]`\n\t);\n\n\trootline\n\t\t.querySelectorAll( '.awpcp-onboarding-rootline-item' )\n\t\t.forEach( ( item ) => {\n\t\t\titem.classList.remove( COMPLETED_STEP_CLASS );\n\t\t\titem.classList.remove( CURRENT_CLASS );\n\t\t} );\n\n\tlet prevItem = currentItem.previousElementSibling;\n\tif ( prevItem ) {\n\t\twhile ( prevItem ) {\n\t\t\tprevItem.classList.add( COMPLETED_STEP_CLASS );\n\t\t\tprevItem = prevItem.previousElementSibling; // move to the previous sibling\n\t\t}\n\t}\n\n\tif ( currentStep === STEPS.SUCCESS ) {\n\t\tcurrentItem.classList.add( COMPLETED_STEP_CLASS );\n\t} else {\n\t\tcurrentItem.classList.add( CURRENT_CLASS );\n\t}\n}\n","/**\n * Internal dependencies\n */\nimport { getElements } from '../elements';\nimport { HIDDEN_CLASS, OPEN_CLASS } from '../shared';\n\n/**\n * Manages event handling for collapsible sections in the onboarding wizard.\n *\n * @return {void}\n */\nfunction addCollapsibleEvents() {\n\tconst { collapsible } = getElements();\n\n\tcollapsible.addEventListener( 'click', onCollapsibleClick );\n}\n\n/**\n * Handles the click event on the collapsible section.\n *\n * @private\n * @param {Event} event The event object\n * @return {void}\n */\nconst onCollapsibleClick = ( event ) => {\n\tevent.preventDefault();\n\n\tconst collapsible = event.currentTarget;\n\tcollapsible.classList.toggle( OPEN_CLASS );\n\n\tconst content = collapsible.nextElementSibling;\n\tcontent.classList.toggle( HIDDEN_CLASS );\n\n\tcontent.classList.toggle( 'awpcp-fadein-down' );\n};\n\nexport default addCollapsibleEvents;\n","/**\n * Internal dependencies\n */\nimport { getElements } from '../elements';\nimport { NONCE } from '../shared';\nimport { navigateToNextStep } from '../utils';\n\n/**\n * Manages event handling for the \"Allow & Continue\" button in the \"Never miss an important update\" step.\n *\n * @return {void}\n */\nfunction addConsentTrackingButtonEvents() {\n\tconst { consentTrackingButton } = getElements();\n\n\tconsentTrackingButton.addEventListener(\n\t\t'click',\n\t\tonConsentTrackingButtonClick\n\t);\n}\n\n/**\n * Handles the click event on the \"Allow & Continue\" button in the \"Never miss an important update\" step.\n *\n * @private\n * @param {Event} event The event object\n * @return {void}\n */\nconst onConsentTrackingButtonClick = async ( event ) => {\n\tevent.preventDefault();\n\n\tconst formData = new FormData();\n\tformData.append( 'action', 'awpcp_onboarding_consent_tracking' );\n\tformData.append( 'nonce', NONCE );\n\n\tlet data;\n\n\ttry {\n\t\t// eslint-disable-next-line no-undef\n\t\tconst response = await fetch( ajaxurl, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: formData,\n\t\t} );\n\n\t\tdata = await response.json();\n\t} catch ( error ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( 'Error:', error );\n\t}\n\n\tif ( ! data.success ) {\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.error( data || 'Request failed' );\n\t\treturn;\n\t}\n\n\tnavigateToNextStep( data );\n};\n\nexport default addConsentTrackingButtonEvents;\n","/**\n * Internal dependencies\n */\nimport { getQueryParam, navigateToStep } from '../utils';\nimport addCollapsibleEvents from './collapsibleListener';\nimport addConsentTrackingButtonEvents from './consentTrackingButtonListener';\nimport addSkipStepButtonEvents from './skipStepButtonListener';\n\n/**\n * Attaches event listeners for handling user interactions.\n *\n * @return {void}\n */\nexport function addEventListeners() {\n\taddSkipStepButtonEvents();\n\taddCollapsibleEvents();\n\taddConsentTrackingButtonEvents();\n}\n\n/**\n * Responds to browser navigation events (back/forward) by updating the UI to match the step indicated in the URL or history state.\n *\n * @param {PopStateEvent} event The event object associated with the navigation action.\n * @return {void}\n */\nwindow.addEventListener( 'popstate', ( event ) => {\n\tconst stepName = event.state?.step || getQueryParam( 'step' );\n\t// Navigate to the specified step without adding to browser history\n\tnavigateToStep( stepName, 'replaceState' );\n} );\n","/**\n * Internal dependencies\n */\nimport { setupInitialView } from './ui';\nimport { addEventListeners } from './events';\n\n/**\n * Initializes Onboarding Wizard.\n *\n * @return {void}\n */\nfunction initializeOnboardingWizard() {\n\tsetupInitialView();\n\taddEventListeners();\n}\n\nexport default initializeOnboardingWizard;\n","/**\n * Internal dependencies\n */\nimport { getElements } from '../elements';\nimport { HIDE_JS_CLASS, STEPS } from '../shared';\nimport { getQueryParam, removeQueryParam, navigateToStep } from '../utils';\n\n/**\n * Initializes the onboarding wizard's UI, sets up the initial step based on certain conditions,\n * and applies necessary UI enhancements for a smoother user experience.\n *\n * @return {void}\n */\nexport default function setupInitialView() {\n\tnavigateToInitialStep();\n\tfadeInPageElements();\n}\n\n/**\n * Determines the initial step in the onboarding process and navigates to it.\n *\n * @private\n * @return {void}\n */\nfunction navigateToInitialStep() {\n\tconst initialStepName = determineInitialStep();\n\n\tclearOnboardingQueryParams();\n\tnavigateToStep( initialStepName, 'replaceState' );\n}\n\n/**\n * Determines the initial step based on the current state.\n *\n * @private\n * @return {string} The name of the initial step to navigate to.\n */\nfunction determineInitialStep() {\n\treturn getQueryParam( 'step' ) || STEPS.INITIAL;\n}\n\n/**\n * Clears specific query parameters related to the onboarding process.\n *\n * @private\n * @return {void}\n */\nfunction clearOnboardingQueryParams() {\n\tremoveQueryParam( 'key' );\n\tremoveQueryParam( 'success' );\n}\n\n/**\n * Smoothly fades in the background and container elements of the page for a more pleasant user experience.\n *\n * @private\n * @return {void}\n */\nfunction fadeInPageElements() {\n\tconst { onboardingWizardPage, container } = getElements();\n\n\tonboardingWizardPage.classList.remove( HIDE_JS_CLASS );\n\tcontainer.classList.toggle( 'awpcp-fadein-up' );\n}\n","/**\n * Internal dependencies\n */\nimport { getElements } from '../elements';\nimport { navigateToNextStep } from '../utils';\n\n/**\n * Manages event handling for the \"Skip\" step button.\n *\n * @return {void}\n */\nfunction addSkipStepButtonEvents() {\n\tconst { skipStepButtons } = getElements();\n\n\tskipStepButtons.forEach( ( skipButton ) => {\n\t\tskipButton.addEventListener( 'click', navigateToNextStep );\n\t} );\n}\n\nexport default addSkipStepButtonEvents;\n","/**\n * @typedef {() => void} Callback\n *\n * TODO: Remove this typedef and inline `() => void` type.\n *\n * This typedef is used so that a descriptive type is provided in our\n * automatically generated documentation.\n *\n * An in-line type `() => void` would be preferable, but the generated\n * documentation is `null` in that case.\n *\n * @see https://github.com/WordPress/gutenberg/issues/18045\n */\n\n/**\n * Specify a function to execute when the DOM is fully loaded.\n *\n * @param {Callback} callback A function to execute after the DOM is ready.\n *\n * @example\n * ```js\n * import domReady from '@wordpress/dom-ready';\n *\n * domReady( function() {\n * \t//do something after DOM loads.\n * } );\n * ```\n *\n * @return {void}\n */\nexport default function domReady(callback) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  if (document.readyState === 'complete' ||\n  // DOMContentLoaded + Images/Styles/etc loaded, so we call directly.\n  document.readyState === 'interactive' // DOMContentLoaded fires at this point, so we call directly.\n  ) {\n    return void callback();\n  }\n\n  // DOMContentLoaded has not fired yet, delay callback until then.\n  document.addEventListener('DOMContentLoaded', callback);\n}\n//# sourceMappingURL=index.js.map","/**\n * WordPress dependencies\n */\nimport domReady from '@wordpress/dom-ready';\n\n/**\n * Internal dependencies\n */\nimport initializeOnboardingWizard from './initializeOnboardingWizard';\n\ndomReady( () => {\n\tinitializeOnboardingWizard();\n} );\n"],"names":["INITIAL_STEP","NONCE","window","awpcpOnboardingWizardVars","PREFIX","HIDDEN_CLASS","CURRENT_CLASS","STEPS","INITIAL","SUCCESS","getElements","addElements","initialElements","Error","elements","newElements","createPageElements","onboardingWizardPage","document","getElementById","container","rootline","steps","querySelectorAll","skipStepButtons","consentTrackingButton","collapsible","querySelector","url","URL","location","href","urlParams","searchParams","getQueryParam","paramName","get","removeQueryParam","delete","search","toString","navigateToStep","stepName","updateMethod","targetStep","currentStep","element","classList","remove","add","show","setAttribute","setQueryParam","paramValue","set","includes","state","history","currentItem","forEach","item","COMPLETED_STEP_CLASS","prevItem","previousElementSibling","updateRootline","navigateToNextStep","nextStep","nextElementSibling","dataset","onCollapsibleClick","event","preventDefault","currentTarget","toggle","content","onConsentTrackingButtonClick","async","formData","FormData","data","append","response","fetch","ajaxurl","method","body","json","error","console","success","addEventListener","step","initialStepName","navigateToInitialStep","fadeInPageElements","skipButton","addSkipStepButtonEvents","addCollapsibleEvents","addConsentTrackingButtonEvents","callback","initializeOnboardingWizard","readyState"],"sourceRoot":""}